#ifndef EmergingJetAnalysis_EmergingJetAnalyzer_OutputTree_h
#define EmergingJetAnalysis_EmergingJetAnalyzer_OutputTree_h

#include <vector>

#include "TTree.h"

using std::vector;

namespace emjet
{
  class OutputTree {
  public:
    OutputTree() { Init(); }
    void Init();

    void Branch(TTree* tree);

    // Generated by cog
    // Do NOT edit until "end"
    //[[[cog
    //import cog
    //import emjet_code as mod; mod.genOutputTree()
    //]]]
    int                      run                           ;
    int                      lumi                          ;
    int                      event                         ;
    int                      bx                            ;
    int                      nVtx                          ;
    int                      nGoodVtx                      ;
    int                      nTrueInt                      ;
    float                    met_pt                        ;
    float                    met_phi                       ;
    vector<float>            jets_pt                    ;
    vector<float>            jets_eta                   ;
    vector<float>            jets_phi                   ;
    vector<float>            jets_cef                   ;
    vector<float>            jets_nef                   ;
    vector<float>            jets_chf                   ;
    vector<float>            jets_nhf                   ;
    vector<float>            jets_phf                   ;
    vector<int>              jets_nPromptTracks         ;
    vector<int>              jets_nDispTracks           ;
    vector<int>              jets_nSV                   ;
    vector<float>            jets_medianLogIpSig        ;
    vector<int>              jets_missHits              ;
    vector<int>              jets_muonHits              ;
    vector<float>            jets_alphaMax              ;
    vector<int>              jets_nDarkPions            ;
    vector<float>            jets_minDRDarkPion         ;
    vector< vector<int> >    tracks_source              ;
    vector< vector<float> >  tracks_pt                  ;
    vector< vector<float> >  tracks_eta                 ;
    vector< vector<float> >  tracks_phi                 ;
    vector< vector<float> >  tracks_pca_r               ;
    vector< vector<float> >  tracks_pca_eta             ;
    vector< vector<float> >  tracks_pca_phi             ;
    vector< vector<int> >    tracks_algo                ;
    vector< vector<int> >    tracks_originalAlgo        ;
    vector< vector<int> >    tracks_nHits               ;
    vector< vector<int> >    tracks_nMissInnerHits      ;
    vector< vector<int> >    tracks_nTrkLayers          ;
    vector< vector<int> >    tracks_nMissInnerTrkLayers ;
    vector< vector<int> >    tracks_nMissOuterTrkLayers ;
    vector< vector<int> >    tracks_nMissTrkLayers      ;
    vector< vector<int> >    tracks_nPxlLayers          ;
    vector< vector<int> >    tracks_nMissInnerPxlLayers ;
    vector< vector<int> >    tracks_nMissOuterPxlLayers ;
    vector< vector<int> >    tracks_nMissPxlLayers      ;
    vector< vector<float> >  tracks_ipXY                ;
    vector< vector<float> >  tracks_ipZ                 ;
    vector< vector<float> >  tracks_ipXYSig             ;
    vector< vector<float> >  tracks_dRToJetAxis         ;
    vector< vector<float> >  tracks_distanceToJet       ;
    vector< vector<float> >  tracks_vertexLxy           ;
    vector< vector<float> >  trackrefs_pt                  ;
    vector< vector<float> >  trackrefs_eta                 ;
    vector< vector<float> >  trackrefs_phi                 ;
    vector< vector<int> >    jet_vertex_source             ;
    vector< vector<float> >  jet_vertex_x                  ;
    vector< vector<float> >  jet_vertex_y                  ;
    vector< vector<float> >  jet_vertex_z                  ;
    vector< vector<float> >  jet_vertex_xError             ;
    vector< vector<float> >  jet_vertex_yError             ;
    vector< vector<float> >  jet_vertex_zError             ;
    vector< vector<float> >  jet_vertex_deltaR             ;
    vector< vector<float> >  jet_vertex_Lxy                ;
    vector< vector<float> >  jet_vertex_mass               ;
    vector< vector<float> >  jet_vertex_chi2               ;
    vector< vector<float> >  jet_vertex_ndof               ;
    vector< vector<float> >  jet_vertex_pt2sum             ;
    vector<int>              vertex_source                 ;
    vector<float>            vertex_x                      ;
    vector<float>            vertex_y                      ;
    vector<float>            vertex_z                      ;
    vector<float>            vertex_xError                 ;
    vector<float>            vertex_yError                 ;
    vector<float>            vertex_zError                 ;
    vector<float>            vertex_Lxy                    ;
    vector<float>            vertex_mass                   ;
    vector<float>            vertex_chi2                   ;
    vector<float>            vertex_ndof                   ;
    vector<float>            vertex_pt2sum                 ;
    //[[[end]]]
  };
}

void
emjet::OutputTree::Init() {
  // Generated by cog
  // Do NOT edit until "end"
  //[[[cog
  //import cog
  //import emjet_code as mod; mod.genInit()
  //]]]
  run                           = -1;
  lumi                          = -1;
  event                         = -1;
  bx                            = -1;
  nVtx                          = -1;
  nGoodVtx                      = -1;
  nTrueInt                      = -1;
  met_pt                        = -1;
  met_phi                       = -1;
  jets_pt                    .clear();
  jets_eta                   .clear();
  jets_phi                   .clear();
  jets_cef                   .clear();
  jets_nef                   .clear();
  jets_chf                   .clear();
  jets_nhf                   .clear();
  jets_phf                   .clear();
  jets_nPromptTracks         .clear();
  jets_nDispTracks           .clear();
  jets_nSV                   .clear();
  jets_medianLogIpSig        .clear();
  jets_missHits              .clear();
  jets_muonHits              .clear();
  jets_alphaMax              .clear();
  jets_nDarkPions            .clear();
  jets_minDRDarkPion         .clear();
  tracks_source              .clear();
  tracks_pt                  .clear();
  tracks_eta                 .clear();
  tracks_phi                 .clear();
  tracks_pca_r               .clear();
  tracks_pca_eta             .clear();
  tracks_pca_phi             .clear();
  tracks_algo                .clear();
  tracks_originalAlgo        .clear();
  tracks_nHits               .clear();
  tracks_nMissInnerHits      .clear();
  tracks_nTrkLayers          .clear();
  tracks_nMissInnerTrkLayers .clear();
  tracks_nMissOuterTrkLayers .clear();
  tracks_nMissTrkLayers      .clear();
  tracks_nPxlLayers          .clear();
  tracks_nMissInnerPxlLayers .clear();
  tracks_nMissOuterPxlLayers .clear();
  tracks_nMissPxlLayers      .clear();
  tracks_ipXY                .clear();
  tracks_ipZ                 .clear();
  tracks_ipXYSig             .clear();
  tracks_dRToJetAxis         .clear();
  tracks_distanceToJet       .clear();
  tracks_vertexLxy           .clear();
  trackrefs_pt                  .clear();
  trackrefs_eta                 .clear();
  trackrefs_phi                 .clear();
  jet_vertex_source             .clear();
  jet_vertex_x                  .clear();
  jet_vertex_y                  .clear();
  jet_vertex_z                  .clear();
  jet_vertex_xError             .clear();
  jet_vertex_yError             .clear();
  jet_vertex_zError             .clear();
  jet_vertex_deltaR             .clear();
  jet_vertex_Lxy                .clear();
  jet_vertex_mass               .clear();
  jet_vertex_chi2               .clear();
  jet_vertex_ndof               .clear();
  jet_vertex_pt2sum             .clear();
  vertex_source                 .clear();
  vertex_x                      .clear();
  vertex_y                      .clear();
  vertex_z                      .clear();
  vertex_xError                 .clear();
  vertex_yError                 .clear();
  vertex_zError                 .clear();
  vertex_Lxy                    .clear();
  vertex_mass                   .clear();
  vertex_chi2                   .clear();
  vertex_ndof                   .clear();
  vertex_pt2sum                 .clear();
  //[[[end]]]
}

void
emjet::OutputTree::Branch(TTree* tree) {
#define BRANCH(tree, branch) (tree)->Branch(#branch, &branch);
  // Generated by cog
  // Do NOT edit until "end"
  //[[[cog
  //import cog
  //import emjet_code as mod; mod.genBranch()
  //]]]
  BRANCH(tree, run                           );
  BRANCH(tree, lumi                          );
  BRANCH(tree, event                         );
  BRANCH(tree, bx                            );
  BRANCH(tree, nVtx                          );
  BRANCH(tree, nGoodVtx                      );
  BRANCH(tree, nTrueInt                      );
  BRANCH(tree, met_pt                        );
  BRANCH(tree, met_phi                       );
  BRANCH(tree, jets_pt                    );
  BRANCH(tree, jets_eta                   );
  BRANCH(tree, jets_phi                   );
  BRANCH(tree, jets_cef                   );
  BRANCH(tree, jets_nef                   );
  BRANCH(tree, jets_chf                   );
  BRANCH(tree, jets_nhf                   );
  BRANCH(tree, jets_phf                   );
  BRANCH(tree, jets_nPromptTracks         );
  BRANCH(tree, jets_nDispTracks           );
  BRANCH(tree, jets_nSV                   );
  BRANCH(tree, jets_medianLogIpSig        );
  BRANCH(tree, jets_missHits              );
  BRANCH(tree, jets_muonHits              );
  BRANCH(tree, jets_alphaMax              );
  BRANCH(tree, jets_nDarkPions            );
  BRANCH(tree, jets_minDRDarkPion         );
  BRANCH(tree, tracks_source              );
  BRANCH(tree, tracks_pt                  );
  BRANCH(tree, tracks_eta                 );
  BRANCH(tree, tracks_phi                 );
  BRANCH(tree, tracks_pca_r               );
  BRANCH(tree, tracks_pca_eta             );
  BRANCH(tree, tracks_pca_phi             );
  BRANCH(tree, tracks_algo                );
  BRANCH(tree, tracks_originalAlgo        );
  BRANCH(tree, tracks_nHits               );
  BRANCH(tree, tracks_nMissInnerHits      );
  BRANCH(tree, tracks_nTrkLayers          );
  BRANCH(tree, tracks_nMissInnerTrkLayers );
  BRANCH(tree, tracks_nMissOuterTrkLayers );
  BRANCH(tree, tracks_nMissTrkLayers      );
  BRANCH(tree, tracks_nPxlLayers          );
  BRANCH(tree, tracks_nMissInnerPxlLayers );
  BRANCH(tree, tracks_nMissOuterPxlLayers );
  BRANCH(tree, tracks_nMissPxlLayers      );
  BRANCH(tree, tracks_ipXY                );
  BRANCH(tree, tracks_ipZ                 );
  BRANCH(tree, tracks_ipXYSig             );
  BRANCH(tree, tracks_dRToJetAxis         );
  BRANCH(tree, tracks_distanceToJet       );
  BRANCH(tree, tracks_vertexLxy           );
  BRANCH(tree, trackrefs_pt                  );
  BRANCH(tree, trackrefs_eta                 );
  BRANCH(tree, trackrefs_phi                 );
  BRANCH(tree, jet_vertex_source             );
  BRANCH(tree, jet_vertex_x                  );
  BRANCH(tree, jet_vertex_y                  );
  BRANCH(tree, jet_vertex_z                  );
  BRANCH(tree, jet_vertex_xError             );
  BRANCH(tree, jet_vertex_yError             );
  BRANCH(tree, jet_vertex_zError             );
  BRANCH(tree, jet_vertex_deltaR             );
  BRANCH(tree, jet_vertex_Lxy                );
  BRANCH(tree, jet_vertex_mass               );
  BRANCH(tree, jet_vertex_chi2               );
  BRANCH(tree, jet_vertex_ndof               );
  BRANCH(tree, jet_vertex_pt2sum             );
  BRANCH(tree, vertex_source                 );
  BRANCH(tree, vertex_x                      );
  BRANCH(tree, vertex_y                      );
  BRANCH(tree, vertex_z                      );
  BRANCH(tree, vertex_xError                 );
  BRANCH(tree, vertex_yError                 );
  BRANCH(tree, vertex_zError                 );
  BRANCH(tree, vertex_Lxy                    );
  BRANCH(tree, vertex_mass                   );
  BRANCH(tree, vertex_chi2                   );
  BRANCH(tree, vertex_ndof                   );
  BRANCH(tree, vertex_pt2sum                 );
  //[[[end]]]
}

// Insert new empty element in nested vector and returns pointer to the added element
template <typename T>
vector<T>&
make_new_element (vector< vector<T> > & vec) {
  vec.push_back( vector<T>() );
  return vec.back();
}


#endif
